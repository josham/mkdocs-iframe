{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Iframe Plugin","text":"<p>MkDocs plugin to integrate HTML reports into your site. This is a modified version of mkdocs-coverage.</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install mkdocs-iframe\n</code></pre></p> <p>With <code>pipx</code>: <pre><code>python -m pip install --user pipx\npipx install mkdocs-iframe\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>You first need generate your html test reports. For example, using pytest-cov and  pytest-html:</p> <pre><code>pytest --cov --html=htmltest/index.html tests\ncoverage html\n</code></pre> <p>will generate two report directories <code>htmlcov</code> and <code>htmltest</code>.</p> <p>Now update your <code>MkDocs</code> config:</p> <pre><code># mkdocs.yml\n\nnav:\n- Coverage report: cov.md  # Needs to match page from below\n- Test report: test.md  # Needs to match page from below\n\nplugins:\n- iframe:\nreports:\n- name: cov\npath: htmlcov  # default f\"html{name}\"\nroot: index.html  # default\npage: cov.md  # f\"{name}.md\"\n- name: test\npath: htmltest  # default f\"html{name}\"\nroot: index.html  # default\npage: test.md  # f\"{name}.md\"\n</code></pre> <p>Give the default settings, you could also use the following, simpler config:</p> <pre><code># mkdocs.yml\n\nnav:\n- Coverage report: cov.md\n- Test report: test.md\n\nplugins:\n- iframe:\nreports:\n- cov\n- test\n</code></pre> <p>Now serve your docs and go to http://localhost:8000/cov/ or http://localhost:8000/test/ to see your test report.</p> <p> </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2023-06-06","title":"0.1.0 - 2023-06-06","text":"<p>Compare with first commit</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocs-iframe\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run mkdocs-iframe [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. </p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build <code>mkdocs-iframe</code>. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code> | <code>mkdocs-coverage</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.6.0</code> ? <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&lt;3.4,&gt;=3.2.1</code> <code>3.3.7</code> BSD License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.2</code> <code>1.4.3</code> BSD License <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>23.1</code> BSD License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10; python_version &lt; \"3.8\"</code> <code>4.6.3</code> Python Software Foundation License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> ?"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.3.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.13.0</code> MIT <code>cached-property</code> A decorator for caching properties in classes. <code>&gt;=1.5; python_version &lt; \"3.8\"</code> <code>1.5.2</code> ? <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.5.7</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.1.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.2.7</code> Apache-2.0 <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>0.11.1</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.1</code> MIT License <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>1.9.0</code> MIT <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>0.11.1</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>1.0.1</code> ISC <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.24</code> <code>0.29.0</code> ISC <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>; python_version &lt; \"3.8\"</code> <code>6.6.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.6.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3</code> <code>1.4.3</code> BSD License <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.5.0</code> MIT License <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.0</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.1.15</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>&gt;=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-section-index</code> MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.5</code> MIT License <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.18</code> <code>0.22.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.1.2</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.3.0</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.1</code> BSD License <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>pip</code> The PyPA recommended tool for installing Python packages. <code>&gt;=23.1.2</code> <code>23.1.2</code> MIT <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.5.1</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.0.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>py</code> library with cross-python path, ini-parsing, io, code, log facilities <code>&gt;=1.8.2</code> <code>1.11.0</code> MIT license <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.14</code> <code>2.15.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.0.1</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.3.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1.0</code> <code>4.1.0</code> MIT <code>pytest-html</code> pytest plugin for generating HTML reports <code>&gt;=3.2.0</code> <code>3.2.0</code> Mozilla Public License 2.0 (MPL 2.0) <code>pytest-metadata</code> pytest plugin for test session metadata <code>3.0.0</code> MIT License <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.12.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4.24</code> <code>2023.6.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>&gt;=2.26</code> <code>2.31.0</code> Apache 2.0 <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.270</code> MIT <code>semver</code> Python helper for Semantic Versioning (http://semver.org/) <code>~=2.13</code> <code>2.13.0</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=67.8.0</code> <code>67.8.0</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> MIT License <code>typed-ast</code> a fork of Python 2 and 3 ast modules with type comment support <code>&gt;=1.4.2; python_version &lt; \"3.8\" and implementation_name == \"cpython\"</code> <code>1.5.4</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.9</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.6</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10.0.0; python_version &lt; \"3.10\"</code> <code>4.6.3</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.2</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> ?"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Josh Mayer\n\nCopyright (c) 2021, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/mkdocs_iframe/","title":"mkdocs_iframe","text":"<p>MkDocs Iframe Plugin package.</p> <p>MkDocs plugin to integrate your HTML reports into your site.</p>"},{"location":"reference/mkdocs_iframe/loggers/","title":"loggers","text":"<p>Logging functions.</p>"},{"location":"reference/mkdocs_iframe/loggers/#mkdocs_iframe.loggers.LoggerAdapter","title":"LoggerAdapter","text":"<pre><code>LoggerAdapter(prefix, logger)\n</code></pre> <p>         Bases: <code>logging.LoggerAdapter</code></p> <p>A logger adapter to prefix messages.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The string to insert in front of every message.</p> required <code>logger</code> <code>logging.Logger</code> <p>The logger instance.</p> required Source code in <code>src/mkdocs_iframe/loggers.py</code> <pre><code>def __init__(self, prefix: str, logger: logging.Logger):\n\"\"\"Initialize the object.\n\n    Arguments:\n        prefix: The string to insert in front of every message.\n        logger: The logger instance.\n    \"\"\"\n    super().__init__(logger, {})\n    self.prefix = prefix\n</code></pre>"},{"location":"reference/mkdocs_iframe/loggers/#mkdocs_iframe.loggers.LoggerAdapter.process","title":"process","text":"<pre><code>process(msg, kwargs)\n</code></pre> <p>Process the message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message:</p> required <code>kwargs</code> <code>MutableMapping[str, Any]</code> <p>Remaining arguments.</p> required <p>Returns:</p> Type Description <code>tuple[Any, MutableMapping[str, Any]]</code> <p>The processed message, and the remaining arguments.</p> Source code in <code>src/mkdocs_iframe/loggers.py</code> <pre><code>def process(self, msg: str, kwargs: MutableMapping[str, Any]) -&gt; tuple[Any, MutableMapping[str, Any]]:\n\"\"\"Process the message.\n\n    Arguments:\n        msg: The message:\n        kwargs: Remaining arguments.\n\n    Returns:\n        The processed message, and the remaining arguments.\n    \"\"\"\n    return f\"{self.prefix}: {msg}\", kwargs\n</code></pre>"},{"location":"reference/mkdocs_iframe/loggers/#mkdocs_iframe.loggers.get_logger","title":"get_logger","text":"<pre><code>get_logger(name)\n</code></pre> <p>Return a pre-configured logger.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to use with <code>logging.getLogger</code>.</p> required <p>Returns:</p> Type Description <code>LoggerAdapter</code> <p>A logger configured to work well in MkDocs.</p> Source code in <code>src/mkdocs_iframe/loggers.py</code> <pre><code>def get_logger(name: str) -&gt; LoggerAdapter:\n\"\"\"Return a pre-configured logger.\n\n    Arguments:\n        name: The name to use with `logging.getLogger`.\n\n    Returns:\n        A logger configured to work well in MkDocs.\n    \"\"\"\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    logger.addFilter(warning_filter)\n    return LoggerAdapter(name, logger)\n</code></pre>"},{"location":"reference/mkdocs_iframe/plugin/","title":"plugin","text":"<p>This module contains the <code>mkdocs_iframe</code> plugin.</p>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.MkDocsIframePlugin","title":"MkDocsIframePlugin","text":"<p>         Bases: <code>BasePlugin</code></p> <p>The MkDocs plugin to integrate the HTML reports in the site.</p>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.MkDocsIframePlugin.on_files","title":"on_files","text":"<pre><code>on_files(files, config, **kwargs)\n</code></pre> <p>Add the html report to the navigation.</p> <p>Hook for the <code>on_files</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>Files</code> <p>The files collection.</p> required <code>config</code> <code>Config</code> <p>The MkDocs config object.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Files</code> <p>The modified files collection.</p> Source code in <code>src/mkdocs_iframe/plugin.py</code> <pre><code>def on_files(self, files: Files, config: Config, **kwargs: Any) -&gt; Files:  # noqa: ARG002\n\"\"\"Add the html report to the navigation.\n\n    Hook for the [`on_files` event](https://www.mkdocs.org/user-guide/plugins/#on_files).\n\n    Arguments:\n        files: The files collection.\n        config: The MkDocs config object.\n        **kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The modified files collection.\n\n    \"\"\"\n    site_dir = Path(config[\"site_dir\"])\n    use_directory_urls = config[\"use_directory_urls\"]\n    for report in self.reports(use_directory_urls=use_directory_urls):\n        page_contents = report.nav_page()\n        tmp_dir = mkdtemp()\n        tmp_file = Path(tmp_dir) / report.page\n        with tmp_file.open(\"w\") as fp:\n            fp.write(page_contents)\n\n        files.append(\n            File(\n                report.page,\n                str(tmp_file.parent),\n                str(site_dir),\n                use_directory_urls,\n            ),\n        )\n\n    return files\n</code></pre>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.MkDocsIframePlugin.on_post_build","title":"on_post_build","text":"<pre><code>on_post_build(config, **kwargs)\n</code></pre> <p>Copy the HTML reports into the site directory.</p> <p>Hook for the <code>on_post_build</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>The MkDocs config object.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> Source code in <code>src/mkdocs_iframe/plugin.py</code> <pre><code>def on_post_build(self, config: Config, **kwargs: Any) -&gt; None:  # noqa: ARG002\n\"\"\"Copy the HTML reports into the site directory.\n\n    Hook for the [`on_post_build` event](https://www.mkdocs.org/user-guide/plugins/#on_post_build).\n\n    Arguments:\n        config: The MkDocs config object.\n        **kwargs: Additional arguments passed by MkDocs.\n\n    \"\"\"\n    site_dir = Path(config[\"site_dir\"])\n    use_directory_urls = config[\"use_directory_urls\"]\n\n    for report in self.reports(use_directory_urls=use_directory_urls):\n        report_dir = site_dir / report.name\n        tmp_index = site_dir / f\".{report.name}-tmp.html\"\n\n        if report.root == \"index.html\":\n            if config[\"use_directory_urls\"]:\n                shutil.move(str(report_dir / \"index.html\"), tmp_index)\n            else:\n                shutil.move(str(report_dir.with_suffix(\".html\")), tmp_index)\n\n        shutil.rmtree(str(report_dir), ignore_errors=True)\n        try:\n            shutil.copytree(report.path, str(report_dir))\n        except FileNotFoundError:\n            log.warning(f\"No such HTML report directory: {report.path}\")\n            return\n\n        if report.root == \"index.html\":\n            report_root = report.root_file()\n\n            shutil.move(str(report_dir / \"index.html\"), report_dir / report_root)\n            if use_directory_urls:\n                shutil.move(str(tmp_index), report_dir / \"index.html\")\n            else:\n                shutil.move(str(tmp_index), report_dir.with_suffix(\".html\"))\n\n            for html_file in report_dir.iterdir():\n                if html_file.suffix == \".html\" and html_file.name != \"index.html\":\n                    html_file.write_text(\n                        re.sub(r'href=\"index\\.html\"', f'href=\"{report_root}\"', html_file.read_text()),\n                    )\n</code></pre>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.MkDocsIframePlugin.reports","title":"reports","text":"<pre><code>reports(*, use_directory_urls=False)\n</code></pre> <p>Convert config data to Reports.</p> Source code in <code>src/mkdocs_iframe/plugin.py</code> <pre><code>def reports(self, *, use_directory_urls: bool = False) -&gt; list[Report]:\n\"\"\"Convert config data to Reports.\"\"\"\n    res = []\n    for report in self.config[\"reports\"]:\n        if isinstance(report, str):\n            res.append(Report(use_directory_urls=use_directory_urls, name=report))\n        else:\n            res.append(Report(use_directory_urls=use_directory_urls, **report))\n    return res\n</code></pre>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.Report","title":"Report","text":"<pre><code>Report(\n    *,\n    name,\n    path=None,\n    root=\"index.html\",\n    page=None,\n    use_directory_urls=False\n)\n</code></pre> <p>HTML Report.</p> Source code in <code>src/mkdocs_iframe/plugin.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: str,\n    path: str | None = None,\n    root: str = \"index.html\",\n    page: str | None = None,\n    use_directory_urls: bool = False,\n):\n\"\"\"Initialize Report.\"\"\"\n    self.name = name\n    self.path = path or f\"html{name}\"\n    self.root = root\n    self.page = page or f\"{name}.md\"\n    self.id = f\"{name}iframe\"\n    self.use_directory_urls = use_directory_urls\n</code></pre>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.Report.nav_page","title":"nav_page","text":"<pre><code>nav_page()\n</code></pre> <p>Generate the NAV page source.</p> Source code in <code>src/mkdocs_iframe/plugin.py</code> <pre><code>def nav_page(self) -&gt; str:\n\"\"\"Generate the NAV page source.\"\"\"\n    root = self.root_file()\n\n    style = textwrap.dedent(\n\"\"\"\n        &lt;style&gt;\n        article h1, article &gt; a, .md-sidebar--secondary {\n            display: none !important;\n        }\n        &lt;/style&gt;\n        \"\"\",\n    )\n\n    iframe = textwrap.dedent(\n        f\"\"\"\n        &lt;iframe\n            id=\"{self.id}\"\n            src=\"{root}\"\n            frameborder=\"0\"\n            scrolling=\"no\"\n            onload=\"resizeIframe();\"\n            width=\"100%\"&gt;\n        &lt;/iframe&gt;\n        \"\"\",\n    )\n\n    script = textwrap.dedent(\n        f\"\"\"\n        &lt;script&gt;\n        var {self.id} = document.getElementById(\"{self.id}\");\n\n        function resizeIframe() {{\n{self.id}.style.height = {self.id}.contentWindow.document.documentElement.offsetHeight + 'px';\n}}\n\n        testiframe.contentWindow.document.body.onclick = function() {{\n{self.id}.contentWindow.location.reload();\n}}\n        &lt;/script&gt;\n\n        \"\"\",\n    )\n    return style + iframe + script\n</code></pre>"},{"location":"reference/mkdocs_iframe/plugin/#mkdocs_iframe.plugin.Report.root_file","title":"root_file","text":"<pre><code>root_file()\n</code></pre> <p>Return the root page of the report.</p> Source code in <code>src/mkdocs_iframe/plugin.py</code> <pre><code>def root_file(self) -&gt; str:\n\"\"\"Return the root page of the report.\"\"\"\n    report_index = self.root\n    if report_index == \"index.html\":\n        report_index = f\"{self.name}index.html\"\n\n    if self.use_directory_urls:\n        return report_index\n    return f\"{self.name}/{report_index}\"\n</code></pre>"},{"location":"cov/","title":"Coverage report","text":""},{"location":"test/","title":"Test report","text":""}]}